"""
Public API endpoints for Excel templates (no authentication required)
"""
from fastapi import APIRouter, HTTPException
from fastapi.responses import StreamingResponse
from typing import List, Optional

from app.templates import generate_course_template, generate_exam_template, generate_student_template

router = APIRouter()

@router.get("/course")
def download_course_template_public():
    """
    Download Excel template for course data (public endpoint)
    """
    try:
        print("Generating public course template")
        output = generate_course_template()
        
        # Add CORS headers
        headers = {
            "Content-Disposition": "attachment; filename=course_template.xlsx",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, OPTIONS",
            "Access-Control-Allow-Headers": "Authorization, Content-Type"
        }
        
        return StreamingResponse(
            output,
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers=headers
        )
    except Exception as e:
        print(f"Error generating public course template: {e}")
        raise HTTPException(status_code=500, detail=f"Error generating template: {str(e)}")

@router.get("/exam")
def download_exam_template_public():
    """
    Download Excel template for exam data (public endpoint)
    """
    try:
        print("Generating public exam template")
        output = generate_exam_template()
        
        # Add CORS headers
        headers = {
            "Content-Disposition": "attachment; filename=exam_template.xlsx",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, OPTIONS",
            "Access-Control-Allow-Headers": "Authorization, Content-Type"
        }
        
        return StreamingResponse(
            output,
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers=headers
        )
    except Exception as e:
        print(f"Error generating public exam template: {e}")
        raise HTTPException(status_code=500, detail=f"Error generating template: {str(e)}")

@router.get("/student")
def download_student_template_public():
    """
    Download Excel template for student data (public endpoint)
    """
    try:
        print("Generating public student template")
        output = generate_student_template()
        
        # Add CORS headers
        headers = {
            "Content-Disposition": "attachment; filename=student_template.xlsx",
            "Access-Control-Allow-Origin": "*",
            "Access-Control-Allow-Methods": "GET, OPTIONS",
            "Access-Control-Allow-Headers": "Authorization, Content-Type"
        }
        
        return StreamingResponse(
            output,
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers=headers
        )
    except Exception as e:
        print(f"Error generating public student template: {e}")
        raise HTTPException(status_code=500, detail=f"Error generating template: {str(e)}")
